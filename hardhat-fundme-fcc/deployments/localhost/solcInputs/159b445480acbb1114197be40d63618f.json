{
  "language": "Solidity",
  "sources": {
    "contracts/Fundme.sol": {
      "content": "//  Get funds from users\n//  withdraw funds\n\n// SPDX-License-Identifier: MIT\npragma solidity >=0.7.0 <0.9.0;\n\n// Notes: manunally declare interface\n// interface AggregatorV3Interface {\n//   function decimals() external view returns (uint8);\n\n//   function description() external view returns (string memory);\n\n//   function version() external view returns (uint256);\n\n//   function getRoundData(uint80 _roundId)\n//     external\n//     view\n//     returns (\n//       uint80 roundId,\n//       int256 answer,\n//       uint256 startedAt,\n//       uint256 updatedAt,\n//       uint80 answeredInRound\n//     );\n\n//   function latestRoundData()\n//     external\n//     view\n//     returns (\n//       uint80 roundId,\n//       int256 answer,\n//       uint256 startedAt,\n//       uint256 updatedAt,\n//       uint80 answeredInRound\n//     );\n// }\n\n// // import directly from github\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\nimport \"./PriceConverter.sol\";\n\n// custme error to save gas \nerror NotOwner();\n\ncontract FundMe {\n    // 1e18 = 10 * 1000000000000000000\n    // use Constant and Immutable to gas efficient\n    uint256 public constant MINIMAL_USD = 50 * 1e18; // use BlockChain Oracle Network to query the USD value to eth\n\n    address[] public funders;\n\n    mapping(address => uint256) public addressToAmountFunded;\n\n    using PriceConverter for uint256;\n\n    address public immutable owner;\n    AggregatorV3Interface public priceFeed;\n\n    constructor(address priceFeedAddres) {\n        owner = msg.sender;\n        priceFeed = AggregatorV3Interface(priceFeedAddres);\n    }\n\n    function fund() public payable{\n        // 1. how to send eth?\n        // require(getConversionRate(msg.value) >= MINIMAL_USD, \"Didn't send  enough\"); // make sure the amount to sending at least 1 et\n\n        require(msg.value.getConversionRate() >= MINIMAL_USD, \"Didn't send  enough\"); // make sure the amount to sending at least 1 et\n        // what is reverting?\n        // undo any antion before, and send remaining \n        funders.push(msg.sender);    \n        addressToAmountFunded[msg.sender] = msg.value;\n    }\n\n\n    function withdraw() public onlyOwner {\n        for(uint256 funderIndex =0 ; funderIndex < funders.length; funderIndex++) {\n            address funder = funders[funderIndex];\n            addressToAmountFunded[funder] = 0;\n        }\n\n        funders = new address[](0);\n        // send to eth\n        // transfer\n        //  send\n        // call\n        payable(msg.sender).transfer(address(this).balance);\n\n        bool sendSuccess = payable(msg.sender).send(address(this).balance);\n        require(sendSuccess, \"Send failed!\");\n        // call \n        (bool callSuccess, ) = payable(msg.sender).call{value: address(this).balance}(\"\");\n        require(callSuccess, \"call failed!\");\n\n    }\n\n    modifier onlyOwner {\n        // require(msg.sender == owner, \"Sender is not owner\");\n        if(msg.sender != owner) { revert NotOwner();}\n        _; // do the rest of the code\n    }\n\n    receive() external payable {\n        fund();\n    }\n\n\n    fallback() external payable{\n        fund();\n    }\n\n    function getPrice(AggregatorV3Interface priceFeed) public view returns(uint256){\n        // 1. ABI\n        // 2. Address of chainlink 0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e\n        // AggregatorV3Interface priceFeed = AggregatorV3Interface(0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e);\n        (\n            /*uint80 roundID*/,\n            int256 price,\n            /*uint startedAt*/,\n            /*uint timeStamp*/,\n            /*uint80 answeredInRound*/\n        ) = priceFeed.latestRoundData();\n\n        return uint256(price * 1e10);\n    }\n\n    function getVersion(AggregatorV3Interface priceFeed) public view returns(uint256) {\n        // AggregatorV3Interface priceFeed = AggregatorV3Interface(0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e);\n\n        return priceFeed.version();\n    }\n\n    function getConversionRate(uint256 ethAmount, AggregatorV3Interface priceFeed) public view returns(uint256) {\n        uint256 ethPrice = getPrice(priceFeed);\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18;\n\n        return ethAmountInUsd;\n    }\n\n\n}"
    },
    "contracts/PriceConverter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.0 <0.9.0;\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\nlibrary PriceConverter {\n    function getPrice() internal view returns(uint256){\n        // 1. ABI\n        // 2. Address of chainlink 0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e\n        AggregatorV3Interface priceFeed = AggregatorV3Interface(0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e);\n        (\n            /*uint80 roundID*/,\n            int256 price,\n            /*uint startedAt*/,\n            /*uint timeStamp*/,\n            /*uint80 answeredInRound*/\n        ) = priceFeed.latestRoundData();\n\n        return uint256(price * 1e10);\n    }\n\n    function getVersion() internal view returns(uint256) {\n        AggregatorV3Interface priceFeed = AggregatorV3Interface(0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e);\n\n        return priceFeed.version();\n    }\n\n    function getConversionRate(uint256 ethAmount) internal view returns(uint256) {\n        uint256 ethPrice = getPrice();\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18;\n\n        return ethAmountInUsd;\n    }\n}"
    },
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    },
    "contracts/test/MockV3Aggregator.sol": {
      "content": "pragma solidity >=0.7.0 <0.9.0;\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\n"
    },
    "contracts/Lock.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.9;\n\n// Uncomment this line to use console.log\n// import \"hardhat/console.sol\";\n\ncontract Lock {\n    uint public unlockTime;\n    address payable public owner;\n\n    event Withdrawal(uint amount, uint when);\n\n    constructor(uint _unlockTime) payable {\n        require(\n            block.timestamp < _unlockTime,\n            \"Unlock time should be in the future\"\n        );\n\n        unlockTime = _unlockTime;\n        owner = payable(msg.sender);\n    }\n\n    function withdraw() public {\n        // Uncomment this line, and the import of \"hardhat/console.sol\", to print a log in your terminal\n        // console.log(\"Unlock time is %o and block timestamp is %o\", unlockTime, block.timestamp);\n\n        require(block.timestamp >= unlockTime, \"You can't withdraw yet\");\n        require(msg.sender == owner, \"You aren't the owner\");\n\n        emit Withdrawal(address(this).balance, block.timestamp);\n\n        owner.transfer(address(this).balance);\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}