const ethers = require('ethers');
const { copyFileSync } = require('fs');
const fs = require('fs-extra');

async function main() {
    const provider = new ethers.providers.JsonRpcProvider("http://0.0.0.0:7545")
    console.log("Start...")

    const wallet = new ethers.Wallet("f486e6ba8152c4b1cdeb0ab031456668bd1cb581aa915721a577d8f7ea23c31d", provider)

    console.log("Connected to wallet")

    const abi = fs.readFileSync('./storage_SimpleStorage_sol_Storage.abi', 'utf8')
    const binary = fs.readFileSync('./storage_SimpleStorage_sol_Storage.bin', 'utf8')

    console.log("read abi and binary")
    try {

        const contractFactory = new ethers.ContractFactory(abi, binary, wallet)

        console.log("Start to deploy...")
        const contract = await contractFactory.deploy()
        console.log("contract deploy complete", contract)
        // console.log("Deployment transaction:", contract.deployTransaction)
        // const deploymentReceipt = await contract.deployTransaction.wait(1)
        // console.log("Deployment Receipt:", deploymentReceipt)

        // console.log("Deployment only with transaction")
        // const nonce = await wallet.getTransactionCount()
        // const tx = {
        //     nonce,
        //     gasPrice: 20000000000,
        //     gasLimit: 1000000,
        //     value: 0,
        //     to: null,
        //     data: '0x608060405234801561001057600080fd5b50610941806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80632e64cec11461005c57806339d515e21461007a5780636057361d146100ab5780636f760f41146100c7578063c4ca4295146100e3575b600080fd5b610064610113565b60405161007191906102b8565b60405180910390f35b610094600480360381019061008f9190610313565b61011c565b6040516100a29291906103d0565b60405180910390f35b6100c560048036038101906100c09190610313565b6101d8565b005b6100e160048036038101906100dc9190610535565b6101e2565b005b6100fd60048036038101906100f89190610591565b610271565b60405161010a91906102b8565b60405180910390f35b60008054905090565b6001818154811061012c57600080fd5b906000526020600020906002020160009150905080600001549080600101805461015590610609565b80601f016020809104026020016040519081016040528092919081815260200182805461018190610609565b80156101ce5780601f106101a3576101008083540402835291602001916101ce565b820191906000526020600020905b8154815290600101906020018083116101b157829003601f168201915b5050505050905082565b8060008190555050565b60006040518060400160405280838152602001848152509050600181908060018154018082558091505060019003906000526020600020906002020160009091909190915060008201518160000155602082015181600101908161024691906107e6565b5050508160028460405161025a91906108f4565b908152602001604051809103902081905550505050565b6002818051602081018201805184825260208301602085012081835280955050505050506000915090505481565b6000819050919050565b6102b28161029f565b82525050565b60006020820190506102cd60008301846102a9565b92915050565b6000604051905090565b600080fd5b600080fd5b6102f08161029f565b81146102fb57600080fd5b50565b60008135905061030d816102e7565b92915050565b600060208284031215610329576103286102dd565b5b6000610337848285016102fe565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561037a57808201518184015260208101905061035f565b60008484015250505050565b6000601f19601f8301169050919050565b60006103a282610340565b6103ac818561034b565b93506103bc81856020860161035c565b6103c581610386565b840191505092915050565b60006040820190506103e560008301856102a9565b81810360208301526103f78184610397565b90509392505050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61044282610386565b810181811067ffffffffffffffff821117156104615761046061040a565b5b80604052505050565b60006104746102d3565b90506104808282610439565b919050565b600067ffffffffffffffff8211156104a05761049f61040a565b5b6104a982610386565b9050602081019050919050565b82818337600083830152505050565b60006104d86104d384610485565b61046a565b9050828152602081018484840111156104f4576104f3610405565b5b6104ff8482856104b6565b509392505050565b600082601f83011261051c5761051b610400565b5b813561052c8482602086016104c5565b91505092915050565b6000806040838503121561054c5761054b6102dd565b5b600083013567ffffffffffffffff81111561056a576105696102e2565b5b61057685828601610507565b9250506020610587858286016102fe565b9150509250929050565b6000602082840312156105a7576105a66102dd565b5b600082013567ffffffffffffffff8111156105c5576105c46102e2565b5b6105d184828501610507565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061062157607f821691505b602082108103610634576106336105da565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b60006008830261069c7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8261065f565b6106a6868361065f565b95508019841693508086168417925050509392505050565b6000819050919050565b60006106e36106de6106d98461029f565b6106be565b61029f565b9050919050565b6000819050919050565b6106fd836106c8565b610711610709826106ea565b84845461066c565b825550505050565b600090565b610726610719565b6107318184846106f4565b505050565b5b818110156107555761074a60008261071e565b600181019050610737565b5050565b601f82111561079a5761076b8161063a565b6107748461064f565b81016020851015610783578190505b61079761078f8561064f565b830182610736565b50505b505050565b600082821c905092915050565b60006107bd6000198460080261079f565b1980831691505092915050565b60006107d683836107ac565b9150826002028217905092915050565b6107ef82610340565b67ffffffffffffffff8111156108085761080761040a565b5b6108128254610609565b61081d828285610759565b600060209050601f831160018114610850576000841561083e578287015190505b61084885826107ca565b8655506108b0565b601f19841661085e8661063a565b60005b8281101561088657848901518255600182019150602085019450602081019050610861565b868310156108a3578489015161089f601f8916826107ac565b8355505b6001600288020188555050505b505050505050565b600081905092915050565b60006108ce82610340565b6108d881856108b8565b93506108e881856020860161035c565b80840191505092915050565b600061090082846108c3565b91508190509291505056fea26469706673582212208193ce4a82ee79e9706fdfa15209437d5354b6f270dbd20e4f2abfb63834b16864736f6c63430008110033',
        //     chainId: 1337
        // }

        // const signTxResponse = await wallet.signTransaction(tx)
        // console.log("Sign:", signTxResponse)
        // const sentTxResponse = await wallet.sendTransaction(tx)
        // await sentTxResponse.wait(1)
        // console.log(sentTxResponse)

        const currentNumber = await contract.retrieve()
        console.log("Current number:", currentNumber)

    } catch (e) {
        console.log('error: ', e)
    }
}

main().then(data => {
    console.log(data)
    // process.exit(0)
})
    .catch(e => {
        process.exit(1)
        console.log(e)
    })